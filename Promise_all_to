//This program represents the working of Promise.all() functionality.
a=new Promise((resolve,reject)=>{
    x=3;
    if(x==3){
        resolve('resolve')
    }
    else{
        reject('reject')
    }
})
b=new Promise((resolve,reject)=>{
    x=4;
    if(x==3){
        resolve('resolve')
    }
    else{
        reject('reject')
    }
})
c=new Promise((resolve,reject)=>{
    x=3;
    if(x==3){
        resolve('resolve')
    }
    else{
        reject('reject')
    }
})
// c.then((x)=>{console.log(x)}).catch((er)=>console.log(er))
promises=[a,b,c]
function promiseAll(promises) {
  return new Promise((resolve, reject) => {
    let results = [];
    let count = 0;

    for (let i = 0; i < promises.length; i++) {
      promises[i]
        .then(result => {
          results[i] = result;
          count++;
          if (count === promises.length) resolve('resolve');
        })
        .catch(error => {
          reject(error);
        });
    }
  });
}
promiseAll(promises).then(dat=>console.log(dat)).catch(err=>console.log(err))
